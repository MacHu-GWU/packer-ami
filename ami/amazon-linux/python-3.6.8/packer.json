{
    "variables": {
        "os_version": "amazon-linux",
        "aws_access_key": "",
        "aws_secret_key": "",
        "aws_region": "",
        // ami name, the final ami name will automatically append an surfix
        "ami_name": "",
        // version of this image
        "version": "",
        // stage of this image, prod / dev / test
        "stage": "",
        "path_local_project_root": "",
        "path_local_ami_dir": "",
        "path_remote_project_root": "",
        "path_remote_ami_dir": ""
    },
    "builders": [
        {
            "type": "amazon-ebs",
            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",
            "region": "{{user `aws_region`}}",
            "source_ami": "ami-0b69ea66ff7391e80",
            "instance_type": "t2.micro",
            "ssh_username": "ec2-user",
            // ami naming converntion, allow user to easily filter it
            "ami_name": "{{user `ami_name`}}-{{user `version`}}-{{user `stage`}}-{{timestamp}}",
            "tags": {
                "AMIName": "{{user `ami_name`}}",
                "AMIFullName": "{{user `ami_name`}}-{{user `version`}}-{{user `stage`}}-{{timestamp}}",
                "AMIVersion": "{{user `version`}}",
                "Stage": "{{user `stage`}}",
                "OSVersion": "{{user `os_version`}}",
                "BaseAMI": "{{.SourceAMI}}",
                "BaseAMIName": "{{.SourceAMIName}}",
                "CreateAt": "{{isotime}}"
            }
        }
    ],
    "provisioners": [
        {
            "type": "shell",
            "inline": [
                "sleep 30"
            ]
        },
        // copy files in this repo from packer runtime environment to remote server
        // ``/tmp/repo`` on remote server represents the root dir of this repo
        // in this example, it is ./packer-ami
        {
            "type": "shell",
            "inline": [
                "mkdir -p /tmp/repo"
            ]
        },
        {
            "type": "file",
            "source": "{{user `path_local_project_root`}}/bin",
            "destination": "/tmp/repo"
        },
        {
            "type": "file",
            "source": "{{user `path_local_project_root`}}/ami",
            "destination": "/tmp/repo"
        },
        // setup software
        {
            "type": "shell",
            "inline": [
                "sudo bash {{user `path_remote_ami_dir`}}/setup/01-yum-install.sh"
            ]
        },
        {
            "type": "shell",
            "inline": [
                "bash {{user `path_remote_ami_dir`}}/setup/02-pyenv.sh"
            ]
        },
        {
            "type": "shell",
            "inline": [
                "bash {{user `path_remote_ami_dir`}}/setup/03-python3.6.8.sh"
            ]
        },
        // validate image
        {
            "type": "shell",
            "inline": [
                "bash {{user `path_remote_ami_dir`}}/remote2-provisioner-test.sh"
            ]
        },
        // clean up artifacts
        {
            "type": "shell",
            "inline": [
                "bash {{user `path_remote_ami_dir`}}/remote3-provisioner-clean-up.sh"
            ]
        }
    ],
    "post-processors": [
        // export artifacts infor to manifest file
        {
            "type": "manifest",
            "output": "{{user `path_local_ami_dir`}}/manifest.json",
            "strip_path": true
        },
        // detect if we need to de-register the image
        {
            "type": "shell-local",
            "script": "{{user `path_local_ami_dir`}}/local1-packer-post-process.sh",
            "environment_vars": [
                "AWS_ACCESS_KEY_ID={{user `aws_access_key`}}",
                "AWS_SECRET_ACCESS_KEY={{user `aws_secret_key`}}",
                "AWS_DEFAULT_REGION={{user `aws_region`}}"
            ],
            "execute_command": ["/bin/bash", "-c", "{{.Vars}} /bin/bash {{.Script}}"]
        }
    ],
    "sensitive-variables": [
        "aws_access_key",
        "aws_secret_key"
    ]
}